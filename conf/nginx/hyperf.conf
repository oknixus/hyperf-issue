upstream hyperf {
    server hyperf:9501;
    keepalive 16;
}

map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

server {
    listen 8003;
    #listen [::]:8003;
    #server_name domain.com;
    server_tokens off;
    root /var/www/html/hyperf/public;

    index index.php;

    charset utf-8;

    # $gzip_ratio计算请求的压缩率，$body_bytes_sent请求体大小
    # log_format main '$remote_addr - $remote_user [$time_local] "$host" - "$request" ' '$gzip_ratio - $body_bytes_sent - $request_time';

    #gzip on; # 开启gzip
    #gzip_buffers 4 32k; 
    #gzip_comp_level 6; # gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间，后面会有详细说明
    #gzip_min_length 1k; # 启用gzip压缩的最小文件，小于设置值的文件将不会压缩
    #gzip_types application/javascript text/css text/xml; # 进行压缩的文件类型。javascript有多种形式。其中的值可以在 mime.types 文件中找到
    #gzip_disable "MSIE [1-6]\."; # 禁用IE 6 gzip
    #gzip_vary on;  # 是否在http header中添加Vary: Accept-Encoding，建议开启
    #gzip_http_version 1.1; # 设置gzip压缩针对的HTTP协议版本

    access_log /var/log/nginx/hyperf-access.log main;
    error_log  /var/log/nginx/hyperf-error.log error;

    add_header Access-Control-Allow-Origin $http_origin;
    add_header Access-Control-Allow-Methods '*';
    add_header Access-Control-Allow-Headers '*';
    add_header Access-Control-Allow-Credentials false; 

    if ($request_method = 'OPTIONS') {
        return 204;
    }

    location /index.php {
        try_files /not_exists @octane;
    }

    location / {
        try_files $uri $uri/ @octane;
    }

    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    error_page 404 /index.php;

    location @octane {
        set $suffix "";

        if ($uri = /index.php) {
            set $suffix ?$query_string;
        }

        proxy_http_version 1.1;
        proxy_set_header Host $http_host;
        proxy_set_header Scheme $scheme;
        proxy_set_header SERVER_PORT $server_port;
        proxy_set_header REMOTE_ADDR $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        proxy_pass http://hyperf$suffix;
    }
}
